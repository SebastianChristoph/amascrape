from pydantic import BaseModel

# ğŸ“Œ Basis-User Schema (Wird von anderen User-Schemas geerbt)
class UserBase(BaseModel):
    username: str

# ğŸ“Œ Schema fÃ¼r die User-Registrierung (erwartet Passwort)
class UserCreate(UserBase):
    password: str

# ğŸ“Œ Schema fÃ¼r die API-Antwort eines Users (enthÃ¤lt ID)
class UserResponse(UserBase):
    id: int

    class Config:
        from_attributes = True  # âœ… ErmÃ¶glicht automatische Umwandlung von SQLAlchemy-Objekten

# ğŸ“Œ Token-Schema fÃ¼r Authentifizierung
class Token(BaseModel):
    access_token: str
    token_type: str

# ğŸ“Œ Schema fÃ¼r Token-Daten (Optionaler Username aus dem Token)
class TokenData(BaseModel):
    username: str | None = None
